from loads import func, MainDescription, FuncDescription, Description
from pyrogram import Client, filters
from pyrogram.types import Message
from pyrogram.errors import FloodWait
import asyncio
import random
import wikipedia
from googletrans import Translator, constants
import json
from gtts import gTTS
from io import BytesIO

wikipedia.set_lang('ru')

__description__ = Description(
    MainDescription("–û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–≥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —é–∑–µ—Ä –±–æ—Ç–æ–º"),
    FuncDescription('/spam {–∫–æ–ª-–≤–æ} {—Ç–µ–∫—Å—Ç}', '–°–ø–∞–º–∏—Ç —Ç–µ–∫—Å—Ç –∫–æ–ª-–≤–æ —Ä–∞–∑'),
    FuncDescription('/ispam {–∏–Ω—Ç–µ—Ä–≤–∞–ª} {–∫–æ–ª-–≤–æ} {—Ç–µ–∫—Å—Ç}', '–°–ø–∞–º–∏—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º'),
    FuncDescription('/rd {–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞} {–≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞}', '–†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç —á–∏—Å–ª–æ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞'),
    FuncDescription('/rt {—Ç–µ–∫—Å—Ç},{—Ç–µ–∫—Å—Ç2},{—Ç–µ–∫—Å—Ç3}', '–†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞'),
    FuncDescription('/calc {–≤—ã—Ä–∞–∂–µ–Ω–∏–µ}', '–í—ã—á–∏—Å–ª—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ'),
    FuncDescription('/wiki {—Ç–µ–∫—Å—Ç}', '–ò—â–µ—Ç —Ç–µ–∫—Å—Ç –≤ –≤–∏–∫–∏–ø–µ–¥–∏–∏'),
    FuncDescription('/tr {—Å} {–Ω–∞} {—Ç–µ–∫—Å—Ç}', '–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫'),
    FuncDescription('/lg_list', '–í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞'),
    FuncDescription('/tts {—Ç–µ–∫—Å—Ç}', '–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ'),
    FuncDescription('/info', '–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–ª–∏ —á–∞—Ç–µ'),
    FuncDescription('/love', '–í—ã–≤–æ–¥–∏—Ç –∞–Ω–∏–º–∞—Ü–∏—é —Å —Å–µ—Ä–¥–µ—á–∫–∞–º–∏'),
    FuncDescription('/t {—Ç–µ–∫—Å—Ç}', '–ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è –≤ —á–∞—Ç–µ'),
    FuncDescription('/proc {—Ç–µ–∫—Å—Ç1},{—Ç–µ–∫—Å—Ç2}', '–ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —á–∞—Ç–µ'),
    FuncDescription('/tanos', '–ù–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∏–º–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –Ω–∏–º —Å–ª–æ–≤–æ "–∏–∑—á–µ—Å"'),
    FuncDescription('/ex', '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç "–ü—Ä–∞–≤–¥–∞" –∏–ª–∏ "–õ–æ–∂—å"'),
    FuncDescription('/dc', '–í—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω–æ "–ß–∏—Å—Ç" –∏–ª–∏ "–ó–∞—Ä–∞–∂—ë–Ω"'),
    FuncDescription('/ghoul', '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≥–¥–µ –æ—Ç–Ω–∏–º–∞—é—Ç 7 –æ—Ç 1000'),
    FuncDescription('/ocase {–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ(–∫–æ–ª-–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏)}', '–ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ "–∫–µ–π—Å–∞" –≤ —á–∞—Ç–µ'),
    FuncDescription('/clown', '–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞–Ω–∏–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∞–¥—Ä–µ—Å—É–µ—Ç—Å—è —Ç–µ–º, –∫—Ç–æ –ø–æ–∑–µ—Ä –∏ –ø—Ä–æ—á–µ–µ')
)
#__description__ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø–ª–∞–≥–∏–Ω –∏ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–∏

__modules__ = ['wikipedia', 'googletrans', 'gtts']
#__modules__ –º–æ–¥—É–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å

@func(filters.command('spam') & filters.me)
async def spam(app: Client, msg: Message):
    try:
        count = int(msg.text.split()[1])
        text = ' '.join(msg.text.split()[2:])
    except (ValueError, IndexError):
        return await app.edit_message_text(msg.chat.id, msg.id, '–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.–ü—Ä–∏–º–µ—Ä: /spam 1 —Ç–µ–∫—Å—Ç')

    for _ in range(count):
        try:
            await app.send_message(msg.chat.id, text)
        except FloodWait as e:
            count += 1
            await asyncio.sleep(e.value)

@func(filters.command('ispam') & filters.me)
async def interval_spam(app: Client, msg: Message):
    try:
        interval = int(msg.text.split()[1])
        count = int(msg.text.split()[2])
        text = ' '.join(msg.text.split()[3:])
    except (ValueError, IndexError):
        return await app.edit_message_text(msg.chat.id, msg.id, '–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.–ü—Ä–∏–º–µ—Ä: /ispam 10 1 —Ç–µ–∫—Å—Ç')

    for _ in range(count):
        try:
            await app.send_message(msg.chat.id, text)
            await asyncio.sleep(interval)
        except FloodWait as e:
            count += 1
            await asyncio.sleep(e.value)

@func(filters.command('rd') & filters.me)
async def random_digits(app: Client, msg: Message):
    try:
        value1 = int(msg.text.split()[1])
        value2 = int(msg.text.split()[2])
    except ValueError:
        return await app.edit_message_text(msg.chat.id, msg.id, '–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.–ü—Ä–∏–º–µ—Ä: /rd 10 100')
    
    await app.edit_message_text(msg.chat.id, msg.id, str(random.randint(value1, value2)))

@func(filters.command('rt') & filters.me)
async def random_text(app: Client, msg: Message):
    try:
        texts = ' '.join(msg.text.split()[1:]).split(',')
    except IndexError:
        return await app.edit_message_text(msg.chat.id, msg.id, '–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.–ü—Ä–∏–º–µ—Ä: /rt —Ç–µ–∫—Å—Ç1,—Ç–µ–∫—Å—Ç2,—Ç–µ–∫—Å—Ç3')

    await app.edit_message_text(msg.chat.id, msg.id, random.choice(texts))

@func(filters.command('calc') & filters.me)
async def calculator(app: Client, msg: Message):
    try:
        expression = ' '.join(msg.text.split()[1:])
    except IndexError:
        return await app.edit_message_text(msg.chat.id, msg.id, '–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.–ü—Ä–∏–º–µ—Ä: /calc 1+1')

    for exp in expression:
        if exp not in '0123456789+-*/() ':
            return await app.edit_message_text(msg.chat.id, msg.id, '–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.–ü—Ä–∏–º–µ—Ä: /calc 1+1')

    await app.edit_message_text(msg.chat.id, msg.id, str(eval(expression)))

@func(filters.command('wiki') & filters.me)
async def wikipedia_search(app: Client, msg: Message):
    await app.edit_message_text(msg.chat.id, msg.id, '–ü–æ–∏—Å–∫...')

    try:
        query = ' '.join(msg.text.split()[1:])
    except IndexError:
        return await app.edit_message_text(msg.chat.id, msg.id, '–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.–ü—Ä–∏–º–µ—Ä: /wiki —Ç–µ–∫—Å—Ç')

    try:
        result = wikipedia.summary(query, sentences=4095)
    except wikipedia.exceptions.DisambiguationError as e:
        options = '\n'.join(str(i) + option for i, option in enumerate(e.options, start=1))
        return await app.edit_message_text(msg.chat.id, msg.id, f'–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö:\n{options}')
    except wikipedia.exceptions.PageError:
        return await app.edit_message_text(msg.chat.id, msg.id, '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')

    await app.edit_message_text(msg.chat.id, msg.id, result)

@func(filters.command('tr') & filters.me)
async def translate(app: Client, msg: Message):
    try:
        dest = msg.text.split()[1]
        src = msg.text.split()[2]
        text = ' '.join(msg.text.split()[3:])
    except IndexError:
        return await app.edit_message_text(msg.chat.id, msg.id, '–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.–ü—Ä–∏–º–µ—Ä: /tr {—Å} {–Ω–∞} {—Ç–µ–∫—Å—Ç}')
    except ValueError:
        return await app.edit_message_text(msg.chat.id, msg.id, '–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —è–∑—ã–∫.–ü—Ä–∏–º–µ—Ä: /tr ru en —Ç–µ–∫—Å—Ç')
    
    trans = Translator()
    result = trans.translate(text, src, dest)
    await app.edit_message_text(msg.chat.id, msg.id, result.text)

@func(filters.command('lg_list') & filters.me)
async def language_list(app: Client, msg: Message):

    await app.edit_message_text(msg.chat.id, msg.id, '–°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –≤—ã–≤–µ–¥–µ–Ω –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª')

    print(json.dumps(constants.LANGUAGES, indent=4))

@func(filters.command('tts') & filters.me)
async def text_to_speech(app: Client, msg: Message):
    await app.delete_messages(msg.chat.id, msg.id)
    
    try:
        text = ' '.join(msg.text.split()[1:])
    except IndexError:
        return await app.edit_message_text(msg.chat.id, msg.id, '–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.–ü—Ä–∏–º–µ—Ä: /tts —Ç–µ–∫—Å—Ç')

    tts = gTTS(text, lang='ru')
    
    audio = BytesIO()
    audio.name = 'audio.ogg'

    tts.write_to_fp(audio)
    audio.seek(0)

    await app.send_audio(msg.chat.id, audio)

@func(filters.command('info') & filters.me)
async def info(app: Client, msg: Message):
    if msg.reply_to_message:
        user = msg.reply_to_message.from_user

        await app.edit_message_text(msg.chat.id, msg.id, f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\nID: {user.id}\n–ò–º—è: {user.first_name}\n–ù–∏–∫–Ω–µ–π–º: {user.username}\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.status}')
    else:
        await app.edit_message_text(msg.chat.id, msg.id, f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\nID: {msg.chat.id}\n–¢–∏–ø: {msg.chat.type}')

@func(filters.command('love') & filters.me)
async def love_animation(_, msg):
   try:
      await msg.edit("""‚ù§Ô∏è""")
      await asyncio.sleep(0.1)
      await msg.edit("""üß°""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíõ""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíö""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíô""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíú""")
      await asyncio.sleep(0.1)
      await msg.edit("""ü§é""")
      await asyncio.sleep(0.1)
      await msg.edit("""üñ§""")
      await asyncio.sleep(0.1)
      await msg.edit("""ü§ç""")
      await asyncio.sleep(0.1)
      await msg.edit("""‚ù§Ô∏è‚ù§Ô∏è
‚ù§Ô∏è‚ù§Ô∏è""")
      await asyncio.sleep(0.1)
      await msg.edit("""üß°üß°
üß°üß°""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíõüíõ
üíõüíõ""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíöüíö
üíöüíö""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíôüíô
üíôüíô""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíúüíú
üíúüíú""")
      await asyncio.sleep(0.1)
      await msg.edit("""ü§éü§é
ü§éü§é""")
      await asyncio.sleep(0.1)
      await msg.edit("""üñ§üñ§
üñ§üñ§""")
      await asyncio.sleep(0.1)
      await msg.edit("""ü§çü§ç
ü§çü§ç""")
      await asyncio.sleep(0.1)
      await msg.edit("""‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è""")
      await asyncio.sleep(0.1)
      await msg.edit("""üß°üß°üß°
üß°üß°üß°
üß°üß°üß°""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíõüíõüíõ
üíõüíõüíõ
üíõüíõüíõ""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíöüíöüíö
üíöüíöüíö
üíöüíöüíö""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíôüíôüíô
üíôüíôüíô
üíôüíôüíô""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíúüíúüíú
üíúüíúüíú
üíúüíúüíú""")
      await asyncio.sleep(0.1)
      await msg.edit("""ü§éü§éü§é
ü§éü§éü§é
ü§éü§éü§é""")
      await asyncio.sleep(0.1)
      await msg.edit("""üñ§üñ§üñ§
üñ§üñ§üñ§
üñ§üñ§üñ§""")
      await asyncio.sleep(0.1)
      await msg.edit("""ü§çü§çü§ç
ü§çü§çü§ç
ü§çü§çü§ç""")
      await asyncio.sleep(0.1)
      await msg.edit("""‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è
‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è""")
      await asyncio.sleep(0.1)
      await msg.edit("""üß°üß°üß°üß°üß°üß°
üß°üß°üß°üß°üß°üß°
üß°üß°üß°üß°üß°üß°
üß°üß°üß°üß°üß°üß°
üß°üß°üß°üß°üß°üß°
üß°üß°üß°üß°üß°üß°""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíõüíõüíõüíõüíõüíõ
üíõüíõüíõüíõüíõüíõ
üíõüíõüíõüíõüíõüíõ
üíõüíõüíõüíõüíõüíõ
üíõüíõüíõüíõüíõüíõ
üíõüíõüíõüíõüíõüíõ""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíöüíöüíöüíöüíöüíö
üíöüíöüíöüíöüíöüíö
üíöüíöüíöüíöüíöüíö
üíöüíöüíöüíöüíöüíö
üíöüíöüíöüíöüíöüíö
üíöüíöüíöüíöüíöüíö""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíôüíôüíôüíôüíôüíô
üíôüíôüíôüíôüíôüíô
üíôüíôüíôüíôüíôüíô
üíôüíôüíôüíôüíôüíô
üíôüíôüíôüíôüíôüíô
üíôüíôüíôüíôüíôüíô""")
      await asyncio.sleep(0.1)
      await msg.edit("""üíúüíúüíúüíúüíúüíú
üíúüíúüíúüíúüíúüíú
üíúüíúüíúüíúüíúüíú
üíúüíúüíúüíúüíúüíú
üíúüíúüíúüíúüíúüíú
üíúüíúüíúüíúüíúüíú""")
      await asyncio.sleep(0.1)
      await msg.edit("""ü§éü§éü§éü§éü§éü§é
ü§éü§éü§éü§éü§éü§é
ü§éü§éü§éü§éü§éü§é
ü§éü§éü§éü§éü§éü§é
ü§éü§éü§éü§éü§éü§é
ü§éü§éü§éü§éü§éü§é""")
      await asyncio.sleep(0.1)
      await msg.edit("""üñ§üñ§üñ§üñ§üñ§üñ§
üñ§üñ§üñ§üñ§üñ§üñ§
üñ§üñ§üñ§üñ§üñ§üñ§
üñ§üñ§üñ§üñ§üñ§üñ§
üñ§üñ§üñ§üñ§üñ§üñ§
üñ§üñ§üñ§üñ§üñ§üñ§""")
      await asyncio.sleep(0.1)
      await msg.edit("""ü§çü§çü§çü§çü§çü§ç
ü§çü§çü§çü§çü§çü§ç
ü§çü§çü§çü§çü§çü§ç
ü§çü§çü§çü§çü§çü§ç
ü§çü§çü§çü§çü§çü§ç
ü§çü§çü§çü§çü§çü§ç""")
   
      for n in range(10):
         output = ''
         for i in range(5):
            output += "".join([random.choice(["‚ù§", "üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(7)]) + "\n"
         
         output += "".join([random.choice(["‚ù§", "üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(7)])
         
         await msg.edit(output)
         await asyncio.sleep(0.1)
      
      for n in range(10):
         output = ''
         for i in range(5):
            output += "".join([random.choice(["‚ù§", "üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(7)]) + "\n"
         
         output += "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(3)]) + "‚ù§" + "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(3)])
         
         await msg.edit(output)
         await asyncio.sleep(0.1)
         
      for n in range(10):
         output = ''
         for i in range(4):
            output += "".join([random.choice(["‚ù§", "üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(7)]) + "\n"
         
         output += "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(2)]) + "‚ù§‚ù§‚ù§" + "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(2)]) + "\n"
         
         output += "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(3)]) + "‚ù§" + "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(3)])
         
         await msg.edit(output)
         await asyncio.sleep(0.1)
      
      for n in range(10):
         output = ''
         for i in range(3):
            output += "".join([random.choice(["‚ù§", "üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(7)]) + "\n"
         
         output += "‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§"  + "\n"
         
         output += "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(2)]) + "‚ù§‚ù§‚ù§" + "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(2)]) + "\n"
         
         output += "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(3)]) + "‚ù§" + "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(3)])
         
         await msg.edit(output)
         await asyncio.sleep(0.1)
      
      for n in range(10):
         output = ''
         for i in range(2):
            output += "".join([random.choice(["‚ù§", "üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(7)]) + "\n"
         
         output += "‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§"  + "\n"
         
         output += "‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§"  + "\n"
         
         output += "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(2)]) + "‚ù§‚ù§‚ù§" + "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(2)]) + "\n"
         
         output += "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(3)]) + "‚ù§" + "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(3)])
         
         await msg.edit(output)
         await asyncio.sleep(0.1)
      
      for n in range(10):
         output = ''
         for i in range(1):
            output += "".join([random.choice(["‚ù§", "üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(7)]) + "\n"
         
         output += "‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§"  + "\n"
         
         output += "‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§"  + "\n"
         
         output += "‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§"  + "\n"
         
         output += "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(2)]) + "‚ù§‚ù§‚ù§" + "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(2)]) + "\n"
         
         output += "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(3)]) + "‚ù§" + "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(3)])
         
         await msg.edit(output)
         await asyncio.sleep(0.1)
      
      output = ''
      
      output += "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(1)]) + "‚ù§" + "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(3)]) + "‚ù§" + "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(1)]) + "\n"
      
      output += "‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§"  + "\n"
      
      output += "‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§"  + "\n"
      
      output += "‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§‚ù§"  + "\n"
         
      output += "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(2)]) + "‚ù§‚ù§‚ù§" + "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(2)]) + "\n"
         
      output += "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(3)]) + "‚ù§" + "".join([random.choice(["üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç"]) for j in range(3)])
         
      await msg.edit(output)
   except FloodWait as e:
      await asyncio.sleep(e.value)

@func(filters.command('t') & filters.me)
async def type_text(app: Client, msg: Message):
    original_text=' '.join(msg.text.split()[1:])
   
    if not original_text:
        return await msg.edit("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä: [—Ç–µ–∫—Å—Ç]")
   
    text = ""
    while (len(original_text) != 0):
        try:
            text += original_text[0]
            
            original_text = original_text[1:]
            
            await msg.edit(text + f"{'|' if len(original_text) % 2 == 0 else ''}")
        except FloodWait as e:
            await asyncio.sleep(e.value)
   
    await msg.edit(text)

@func(filters.command('proc') & filters.me)
async def procents(app: Client, msg: Message):
    try:
        text1 = " ".join(msg.text.split(maxsplit=2)[1:]).split(",")[0]
        text2 = " ".join(msg.text.split(maxsplit=2)[1:]).split(",")[1]
    except IndexError as e:
        return await msg.edit("–í—ã –Ω–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.–ü—Ä–∏–º–µ—Ä: /proc —Ç–µ–∫—Å—Ç1,—Ç–µ–∫—Å—Ç2")
    
    text2 = f"{text2.strip()}"
    
    proc = 0
    
    while (proc < 101):
        try:
            await msg.edit(f"{text1}{proc}%")
            
            await asyncio.sleep(0.2)
            
            proc += random.randint(1, 5)
        except FloodWait as e:
            await asyncio.sleep(e.value)
        
    await msg.edit(f"{text2}")

@func(filters.command('tanos') & filters.me)
async def tanos(app: Client, msg: Message):
    if str(msg.chat.type) in ["ChatType.GROUP", "ChatType.SUPERGROUP"]:
        await msg.answer('*–©–µ–ª—á–æ–∫ —Ç–∞–Ω–æ—Å–∞')

        async for user in app.get_chat_members(msg.chat.id):
            try:
                await msg.answer(f'*{user.user.first_name} –∏—Å—á–µ–∑')
            except FloodWait as e:
                await asyncio.sleep(e.value)
@func(filters.command('ex') & filters.me)
async def ex(app: Client, msg: Message):
    await msg.edit(random.choice(["–ü—Ä–∞–≤–¥–∞", "–õ–æ–∂—å"]))

@func(filters.command('dc') & filters.me)
async def doctor(app: Client, msg: Message):
    await msg.edit("üë®‚Äç‚öïÔ∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –¥–æ–∫—Ç–æ—Ä Floats, —Å–µ–π—á–∞—Å —è –≤–æ–∑—å–º—É —É –≤–∞—Å –∫—Ä–æ–≤—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–æ–ª–µ–∑–Ω–∏ \"–ö—Ä–∏–Ω–∂–∞–Ω—É—Ç—ã–π\"üíâ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –¥–≤–∏–≥–∞–π—Ç–µ—Å—å –∞ —Ç–æ –¥–∞–º –ø–æ–¥–∑–∞—Ç—ã–ª–æ–∫.")
    
    await asyncio.sleep(7)
    
    proc = 0
    
    while (proc < 101):
        try:
            await msg.edit(f"–ù–∞–±—Ä–∞–Ω–æ –∫—Ä–æ–≤–∏ –≤ —à–ø—Ä–∏—Ü...{proc}%")
            
            await asyncio.sleep(0.1)
            
            proc += random.randint(1, 5)
        except FloodWait as e:
            await asyncio.sleep(e.value)
    
    proc = 0
    
    while (proc < 101):
        try:
            await msg.edit(f"–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...{proc}%")
            
            await asyncio.sleep(0.1)
            
            proc += random.randint(1, 5)
        except FloodWait as e:
            await asyncio.sleep(e.value)
    
    await msg.edit(random.choice(["–ß–∏—Å—Ç", "–ó–∞—Ä–∞–∂—ë–Ω, –±–µ–≥–∏—Ç–µ –æ—Ç—Å—é–¥–∞"]))

@func(filters.command('ghoul') & filters.me)
async def ghoul_table(app: Client, msg: Message):
    row = 0
    ghoulich = 1000
    output = ''

    while ghoulich >= 0:
        try:
            row += 1
            ghoulich -= 7

            output += f"{ghoulich + 7} - 7 = {ghoulich}\n\n"

            if row == 10:
                await msg.edit(output)
                output = ''
                row = 0
            
            await asyncio.sleep(0.1)
        except FloodWait as e:
            await asyncio.sleep(e.value)
    
    await msg.edit(output)

@func(filters.command('ocase') & filters.me)
async def open_case(app: Client, msg: Message):
    splited = msg.text.split()
    
    try:
        if int("".join(splited[1])) <= 0:
            return await msg.edit("–ù–µ–ª—å–∑—è —Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫—É –º–µ–Ω—å—à–µ 1")
    except Exception as e:
        await spin_case(msg)
    
    try:
        await spin_case(msg, spin=splited[1])
    except:
        pass

async def spin_case(msg, spin=10):
    emojis_in_case = ["‚¨ú", "üü¶", "üüß", "üü™", "üü®", "üü•", "‚¨õ", "üíü"]
    
    output = "".join([random.choice(emojis_in_case) for i in range(14)])
    
    await msg.edit(f"‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú3Ô∏è‚É£‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú\n{output}")
    
    await asyncio.sleep(0.5)
    
    await msg.edit(f"‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú2Ô∏è‚É£‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú\n{output}")
    
    await asyncio.sleep(0.5)
    
    await msg.edit(f"‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú1Ô∏è‚É£‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú\n{output}")
    
    await asyncio.sleep(0.5)
    
    await msg.edit(f"‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨úüîΩ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú\n{output}")
    
    for i in range(int(spin)):
        try:
            output = output[1:]
            output += random.choice(emojis_in_case)
            
            await msg.edit(f"‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨úüîΩ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú\n{output}")

            await asyncio.sleep(0.05)
        except FloodWait as e:
            await asyncio.sleep(e.value)

    await asyncio.sleep(0.5)
    
    emoji_rare = {
   f"{emojis_in_case[0]}": f"{emojis_in_case[0]} - common",
   f"{emojis_in_case[1]}": f"{emojis_in_case[1]} - uncommon",
   f"{emojis_in_case[2]}": f"{emojis_in_case[2]} - rare",
   f"{emojis_in_case[3]}": f"{emojis_in_case[3]} - epic",
   f"{emojis_in_case[4]}": f"{emojis_in_case[4]} - legendary",
   f"{emojis_in_case[5]}": f"{emojis_in_case[5]} - expensive",
   f"{emojis_in_case[6]}": f"{emojis_in_case[6]} - negr",
   f"{emojis_in_case[7]}": f"{emojis_in_case[7]} - incredible"
    }
    
    if msg.reply_to_message:
        try:
            name = msg.reply_to_message.from_user.first_name
        except:
            name = msg.from_user.first_name
        await msg.edit(f"‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨úüîΩ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú\n{output}\n{name} –≤—ã–ø–∞–ª–æ: {emoji_rare.get(output[6])}")
    else:
        await msg.edit(f"‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨úüîΩ‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú\n{output}\n–≤–∞–º –≤—ã–ø–∞–ª–æ: {emoji_rare.get(output[6])}")

@func(filters.command('clown') & filters.me)
async def clown(app: Client, msg: Message):
    await msg.edit("""ü´≤ üòêü´±            üì∑""")
    await asyncio.sleep(1)
    await msg.edit("""ü´≤ üòêü´±      üì∑""")
    await asyncio.sleep(1)
    await msg.edit("""ü´≤ üòêü´±  üì∑""")
    await asyncio.sleep(1)
    await msg.edit("""ü´≤ üòêüì∑""")
    await asyncio.sleep(1)
    await msg.edit("""ü´≤ üòêüì∏""")
    await asyncio.sleep(1)
    await msg.edit("""ü´≤ üòêüì∑""")
    await asyncio.sleep(1)
    await msg.edit("""ü´≤ üòêüì∑
           üñºÔ∏è""")
    await asyncio.sleep(1)
    await msg.edit("""ü´≤ üòêü´±
           üñºÔ∏è""")
    await asyncio.sleep(1)
    await msg.edit("""ü´≤ üòêüñºÔ∏è""")
    await asyncio.sleep(1)
    await msg.edit("""ü´µ üòêü§°""")
